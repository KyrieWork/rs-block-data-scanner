# ============================
# Block Data Scanner Configuration
# ============================
# This configuration file defines all settings for the blockchain data scanner.
# The scanner supports multiple chains and provides real-time block data collection.

# ============================
# Basic Scanner Configuration
# ============================
scanner:
  # Chain type: "evm" (Ethereum Virtual Machine) or "solana"
  chain_type: "evm"
  
  # Chain name identifier (used for storage paths and logging)
  chain_name: "ethereum"
  
  # Starting block number for scanning (0 = start from latest block)
  start_block: 0

  # ============================
  # Scanning Behavior Settings
  # ============================
  
  # Number of concurrent RPC requests (higher = faster but more resource intensive)
  # Values > 1 enable concurrent scanning during catch-up phase
  concurrency: 4
  
  # RPC request timeout in seconds
  timeout_secs: 15
  
  # Number of blocks to wait for finality before scanning (prevents reorg issues)
  confirm_blocks: 5

  # ============================
  # Scan Timing Configuration
  # ============================
  
  # Scan interval when fully synced (seconds)
  # Lower values = more frequent checks but higher RPC load
  synced_interval_secs: 3
  
  # Scan interval when catching up (milliseconds)
  # Lower values = faster catch-up but higher RPC load
  catching_up_interval_millis: 10

  # ============================
  # Performance Optimization
  # ============================
  
  # Batch size for saving blocks to storage
  # Larger batches = better performance but more memory usage
  batch_save_size: 50
  
  # Enable reorganization detection and handling
  # Recommended: true (prevents data corruption from chain reorgs)
  reorg_check_enabled: true

  # ============================
  # Data Cleanup Configuration
  # ============================
  
  # Enable automatic cleanup of old block data
  # WARNING: This will permanently delete old blocks!
  cleanup_enabled: false
  
  # Number of recent blocks to retain (older blocks will be deleted)
  # Set to null or 0 to disable retention-based cleanup
  retention_blocks: 1000
  
  # Cleanup frequency in blocks (how often to run cleanup)
  # Lower values = more frequent cleanup but higher overhead
  cleanup_interval_blocks: 100
  
  # Batch size for cleanup operations
  # Larger batches = faster cleanup but more memory usage
  cleanup_batch_size: 1000
  
  # Enable cleanup of orphaned data (unreferenced blocks)
  # WARNING: This is resource-intensive and scans all stored data
  cleanup_orphaned_enabled: false

# ============================
# RPC Node Configuration
# ============================
rpc:
  # Primary RPC endpoint URL
  # Replace with your actual RPC provider URL and API key
  url: "https://mainnet.infura.io/v3/YOUR_API_KEY"
  
  # Backup RPC endpoints (optional)
  # Used automatically if primary endpoint fails
  backups:
    - "https://eth.llamarpc.com"
    - "https://rpc.flashbots.net"

# ============================
# Storage Configuration
# ============================
storage:
  # Base directory for RocksDB storage
  # Final path will be: {path}/{chain_name}/
  # Examples:
  #   - Ethereum: ./data/rocksdb/ethereum/
  #   - BSC: ./data/rocksdb/bsc/
  path: "./data/rocksdb"
  
  # Enable RocksDB compression (recommended for disk space savings)
  compression: true
  
  # Custom column families for data organization (optional)
  # Uncomment and modify as needed for your use case
  # column_families: ["blocks", "transactions", "logs"]

# ============================
# Logging Configuration
# ============================
logging:
  # Log level: trace, debug, info, warn, error
  level: "info"
  
  # Enable file logging (recommended for production)
  to_file: true
  
  # Log file directory
  path: "./logs"

# ============================
# Metrics Configuration
# ============================
metrics:
  # Enable Prometheus metrics export
  enable: true
  
  # Port for Prometheus metrics endpoint
  prometheus_exporter_port: 9100